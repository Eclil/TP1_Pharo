TestCase subclass: #MyCircleTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exo2'!!MyCircleTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 01:41'!testArea	|circle|	circle := MyCircle radius: 7.		self assert: circle area closeTo: 153.9 precision: 0.001 .! !!MyCircleTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 15:18'!testNegativeRadius	|circle|		self 	should: [ circle := MyCircle radius: -0.75 ]	raise: Error.! !!MyCircleTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 01:31'!testCircleCreate	| circle circle2 circle3 |		circle := MyCircle new.	self assert: circle radius equals: 0;	assert: circle color equals: 'Black';	assert: circle isFilled equals: true.		circle2 := MyCircle radius: 7.	self assert: circle2 radius equals: 7;	assert: circle2 color equals: 'Black';	assert: circle2 isFilled equals: true.		circle3 := MyCircle radius: 2 color: 'Red' isFilled: false.	self assert: circle3 radius equals: 2;	assert: circle3 color equals: 'Red';	assert: circle3 isFilled equals: false.! !!MyCircleTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 01:41'!testPerimeter	|circle|	circle := MyCircle radius: 7.		self assert: circle perimeter closeTo: 44 precision: 0.001 .! !!MyCircleTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 01:33'!testPrintOn	|circle|		circle := MyCircle radius: 7 color: 'Yellow' isFilled: true.		self assert: circle asString equals: 'Color = Yellow. Shape is filled. Radius = 7'.		circle color: 'Blue';	Empty.		self assert: circle asString equals: 'Color = Blue. Shape is not filled. Radius = 7'.! !TestCase subclass: #MyRectangleTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exo2'!!MyRectangleTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 16:06'!testPerimeterRectangle	|rectangle|		rectangle := MyRectangle width: 3 height: 8.	self assert: rectangle perimeter equals: 22.! !!MyRectangleTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 16:08'!testPrintOn	|rectangle|		rectangle := MyRectangle width: 7 height: 1 color: 'Yellow' isFilled: true.		self assert: rectangle asString equals: 'Color = Yellow. Shape is filled. Width = 7. Height = 1'.		rectangle color: 'Blue';	Empty.		self assert: rectangle asString equals: 'Color = Blue. Shape is not filled. Width = 7. Height = 1'.! !!MyRectangleTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 16:05'!testAreaRectangle	|rectangle|		rectangle := MyRectangle width: 5 height: 7.	self assert: rectangle area equals: 35.! !!MyRectangleTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 15:36'!testCreateRectangle				| rectangle1 rectangle2 rectangle3 |		rectangle1 := MyRectangle new.	self assert: rectangle1 width equals: 0;	assert: rectangle1 height equals: 0;	assert: rectangle1 color equals: 'Black';	assert: rectangle1 isFilled equals: true.		rectangle2 := MyRectangle width: 7 height: 9.	self assert: rectangle2 width equals: 7;	assert: rectangle2 height equals: 9;	assert: rectangle2 color equals: 'Black';	assert: rectangle2 isFilled equals: true.		rectangle3 := MyRectangle width: 1 height: 2 color: 'Red' isFilled: false.	self assert: rectangle3 width equals: 1;	assert: rectangle3 height equals: 2;	assert: rectangle3 color equals: 'Red';	assert: rectangle3 isFilled equals: false.! !!MyRectangleTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 16:10'!testNegativeDimensions	|rectangle|		self 	should: [ rectangle := MyRectangle width: -1 height: 1 ]	raise: Error.		self	should: [ rectangle := MyRectangle width: 1 height: -1 ]	raise: Error.		self	should: [ rectangle := MyRectangle width: -1 height: -1 ]	raise: Error.! !Object subclass: #MyShape	instanceVariableNames: 'color isFilled'	classVariableNames: ''	package: 'TP1-Exo2'!!MyShape methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 17:37'!isFilled	 ^ isFilled! !!MyShape methodsFor: 'accessing'!isFilled: aBool	 isFilled := aBool.! !!MyShape methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/6/2022 01:10'!color	 ^color! !!MyShape methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/6/2022 01:15'!Empty	 isFilled := false.! !!MyShape methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/6/2022 01:15'!Fill	 isFilled := true.! !!MyShape methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/6/2022 01:10'!color: aString	 color := aString! !!MyShape methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/6/2022 01:20'!printOn: aStream		aStream nextPutAll: 'Color = ' asString;	nextPutAll: color asString;	nextPutAll: '. Shape is '.	isFilled ifFalse: [ aStream nextPutAll: 'not ' ].	aStream nextPutAll: 'filled'.! !!MyShape methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 16:48'!area		self subclassResponsibility! !!MyShape methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 16:48'!perimeter		self subclassResponsibility! !!MyShape methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 16:47'!initialize 		super initialize.		color := 'Black'.	isFilled := true.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyShape class	instanceVariableNames: ''!!MyShape class methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/6/2022 00:27'!color: aString isFilled: aBool	|shape|	shape := MyShape new.		shape color: aString;	isFilled: aBool.		^shape! !!MyShape class methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 17:43'!color: aString	|shape|	shape := MyShape new.		shape color: aString.		^shape! !MyShape subclass: #MyCircle	instanceVariableNames: 'radius'	classVariableNames: ''	package: 'TP1-Exo2'!!MyCircle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/6/2022 01:20'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: '. Radius = ';	nextPutAll: radius asString.	! !!MyCircle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 17:33'!perimeter	^(Float pi)*2*radius! !!MyCircle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 17:33'!area	^(Float pi)*(radius**2)! !!MyCircle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/6/2022 15:09'!radius: aFloat		(aFloat >= 0)	ifTrue:[radius := aFloat];	ifFalse:[^Error new signal: 'radius value inferior to zero'].! !!MyCircle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 17:25'!initialize	super initialize.		radius := 0.! !!MyCircle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 17:26'!radius	^radius! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyCircle class	instanceVariableNames: ''!!MyCircle class methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 17:36'!radius: aFloat 	|circle|	circle := MyCircle new.		circle radius: aFloat. 	^circle! !!MyCircle class methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/6/2022 00:30'!radius: aFloat color: aString isFilled: aBool 	|circle|	circle := MyCircle new.	circle radius: aFloat;	color: aString;	isFilled: aBool.	^circle! !MyShape subclass: #MyRectangle	instanceVariableNames: 'width height'	classVariableNames: ''	package: 'TP1-Exo2'!!MyRectangle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 16:57'!width				^width! !!MyRectangle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/6/2022 15:51'!height: aFloat				(aFloat >= 0)	ifTrue:[height := aFloat];	ifFalse:[^Error new signal: 'height value inferior to zero'].! !!MyRectangle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/6/2022 15:51'!width: aFloat				(aFloat >= 0)	ifTrue:[width := aFloat];	ifFalse:[^Error new signal: 'width value inferior to zero'].! !!MyRectangle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 16:57'!height				^height! !!MyRectangle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 16:56'!initialize				super initialize.		width := 0.	height := 0.! !!MyRectangle methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/6/2022 01:20'!printOn: aStream					super printOn: aStream.				aStream nextPutAll: '. Width = ';		nextPutAll: width asString;		nextPutAll: '. Height = ';		nextPutAll: height asString.! !!MyRectangle methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 17:11'!area 	^width*height! !!MyRectangle methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/6/2022 00:31'!perimeter	^2*(width + height)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyRectangle class	instanceVariableNames: ''!!MyRectangle class methodsFor: 'instance creation' stamp: 'JeanPaulDuboux 10/5/2022 17:08'!width: aFloat height: anotherFloat	|rectangle|	rectangle := MyRectangle new.		rectangle width: aFloat. 	rectangle height: anotherFloat. 	^rectangle! !!MyRectangle class methodsFor: 'instance creation' stamp: 'JeanPaulDuboux 10/6/2022 00:33'!width: aFloat height: anotherFloat color: aString isFilled: aBool	|rectangle|	rectangle := MyRectangle new.		rectangle width: aFloat; 	height: anotherFloat;	color: aString;	isFilled: aBool. 	^rectangle! !TestCase subclass: #MyShapeTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exo2'!!MyShapeTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 01:14'!testFillEmptyShape	|shape|	shape := MyShape new.		self assert: shape isFilled equals: true.		shape Empty.	self assert: shape isFilled equals: false.		shape Fill.	self assert: shape isFilled equals: true.		shape Fill.	self assert: shape isFilled equals: true.! !!MyShapeTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 01:20'!testPrintOn	|shape|		shape := MyShape color: 'Yellow'.		self assert: shape asString equals: 'Color = Yellow. Shape is filled'.		shape color: 'Blue';	Empty.		self assert: shape asString equals: 'Color = Blue. Shape is not filled'.! !!MyShapeTest methodsFor: 'as yet unclassified' stamp: 'JeanPaulDuboux 10/6/2022 01:13'!testCreateShape		|shape shape2|		shape := MyShape new.		self assert: shape color equals: 'Black'.	self assert: shape isFilled equals: true.		shape2 := MyShape color: 'Blue' isFilled: false.	self assert: shape2 color equals: 'Blue'.	self assert: shape2 isFilled equals: false.! !MyRectangle subclass: #MySquare	instanceVariableNames: 'side'	classVariableNames: ''	package: 'TP1-Exo2'!!MySquare methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/6/2022 16:25'!side: aFloat	(aFloat >= 0)	ifTrue:[side := aFloat. width := side. height := side. ];	ifFalse:[^Error new signal: 'side value inferior to zero'].! !!MySquare methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 17:14'!area 	^side**2! !!MySquare methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 17:14'!perimeter	^4*side! !!MySquare methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 17:12'!side	^side! !!MySquare methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/6/2022 00:35'!initialize 	super initialize.		side := 0.	width := 0.	height := 0.! !!MySquare methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/6/2022 01:20'!printOn: aStream	aStream nextPutAll: 'Color = ' asString;	nextPutAll: color asString;	nextPutAll: '. Shape is '.	isFilled ifFalse: [ aStream nextPutAll: 'not ' ].	aStream nextPutAll: 'filled. ';	nextPutAll: 'Side = ';	nextPutAll: side asString.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MySquare class	instanceVariableNames: ''!!MySquare class methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 17:17'!side: aFloat 	|square|	square := MySquare new.		square side: aFloat. 	^square! !!MySquare class methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/6/2022 00:40'!side: aFloat color: aString isFilled: aBool	|square|	square := MySquare new.		square side: aFloat;	color: aString;	isFilled: aBool.	^square! !TestCase subclass: #MySquareTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exo2'!!MySquareTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 16:33'!testPerimeter		| square |		square := MySquare side: 8.	self assert: square perimeter equals: 32. ! !!MySquareTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 16:55'!testNegativeSide	|square|		self 	should: [ square := MySquare side: -1 ]	raise: Error.	! !!MySquareTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 16:35'!testAreaSquare		| square |		square := MySquare side: 9.	self assert: square area equals: 81. ! !!MySquareTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 16:31'!testCreateSquare		| square1 square2 square3 |		square1 := MySquare new.	self assert: square1 side equals: 0;	assert: square1 width equals: 0;	assert: square1 height equals: 0;	assert: square1 color equals: 'Black';	assert: square1 isFilled equals: true.		square2 := MySquare side: 6.	self assert: square2 side equals: 6;	assert: square2 width equals: 6;	assert: square2 height equals: 6;	assert: square2 color equals: 'Black';	assert: square2 isFilled equals: true.		square3 := MySquare side: 5 color: 'Green' isFilled: false.	self assert: square3 side equals: 5;	assert: square3 width equals: 5;	assert: square3 height equals: 5;	assert: square3 color equals: 'Green';	assert: square3 isFilled equals: false.! !!MySquareTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 16:36'!testPrintOn	|square|		square := MySquare side: 3 color: 'Yellow' isFilled: true.		self assert: square asString equals: 'Color = Yellow. Shape is filled. Side = 3'.		square color: 'Blue';	Empty.		self assert: square asString equals: 'Color = Blue. Shape is not filled. Side = 3'.! !