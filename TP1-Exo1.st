Object subclass: #MyLine	instanceVariableNames: 'begin end'	classVariableNames: ''	package: 'TP1-Exo1'!!MyLine methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 09:39'!begin: aMyPoint end: anotherPoint		begin := aMyPoint.	end := anotherPoint.! !!MyLine methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 10:49'!gradient				| gradient |		(end x = begin x)	ifTrue: [gradient := 0].		(begin x < end x)	ifTrue: [gradient := (end y - begin y)/(end x - begin x)].		(begin x > end x)	ifTrue: [gradient := (begin y - end y)/(begin x - end x)].		 ^gradient ! !!MyLine methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 09:28'!begin		^begin! !!MyLine methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 10:08'!length 		|beginx beginy endx endy length|		beginx := begin x.	beginy := begin y.	endx := end x.	endy := end y.		length := ((endx - beginx)**2 + ((endy - beginy)**2)) sqrt.		^length! !!MyLine methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 09:28'!end		^end! !!MyLine methodsFor: 'printing' stamp: 'JeanPaulDuboux 10/5/2022 11:39'!printOn: aStream	aStream		nextPut: $(;		nextPutAll: begin x asString;		nextPut: $,;		nextPutAll: begin y asString;		nextPut: $);		nextPut: $-;		nextPut: $>;		nextPut: $(;		nextPutAll: end x asString;		nextPut: $,;		nextPutAll: end y asString;		nextPut: $).! !!MyLine methodsFor: 'initialization'!initialize	super initialize.		begin := MyPoint new.	end := MyPoint new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyLine class	instanceVariableNames: ''!!MyLine class methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 09:57'!begin: aPoint end: anotherPoint	|line|	line := MyLine new.		line begin: aPoint end: anotherPoint. 	^line! !TestCase subclass: #MyLineTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exo1'!!MyLineTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/5/2022 10:41'!testVerticalGradient				| line pBegin pEnd|	pBegin := MyPoint x: 3 y: 2.	pEnd := MyPoint x: 3 y: 7.		line := MyLine begin: pBegin end: pEnd.		self assert: line gradient equals: 0. ! !!MyLineTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 19:43'!testCreateMyLine				| line begin end line2| 	begin := MyPoint x: 3 y: 7.	end := MyPoint x: 4 y: 7.		line := MyLine begin:begin end:end.		self assert: line begin equals: begin.	self assert: line end equals: end.		line2 := MyLine new.		self assert: line2 begin x equals: 0;	assert: line2 begin y equals: 0;	assert: line2 end x equals: 0;	assert: line2 end y equals: 0. 	! !!MyLineTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/5/2022 10:21'!testHorizontalGradient				| line pBegin pEnd|	pBegin := MyPoint x: 1 y: 7.	pEnd := MyPoint x: 3 y: 7.		line := MyLine begin: pBegin end: pEnd.		self assert: line gradient equals: 0. ! !!MyLineTest methodsFor: 'tests'!testPrintOn		|line|	line := MyLine new.		self assert: line asString equals: '(0,0)->(0,0)'.! !!MyLineTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/5/2022 10:00'!testLength				| line pBegin pEnd|	pBegin := MyPoint x: 0 y: 0.	pEnd := MyPoint x: 3 y: 4.		line := MyLine begin: pBegin end: pEnd.		self assert: line length equals: 5. ! !!MyLineTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/5/2022 10:50'!testInvariantGradient				| line line2 pBegin pEnd|	pBegin := MyPoint x: 8 y: 2.	pEnd := MyPoint x: 3 y: 7.		line := MyLine begin: pBegin end: pEnd.	line2 := MyLine begin: pEnd end: pBegin.		self assert: line gradient equals: line2 gradient . ! !!MyLineTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/5/2022 10:10'!testGradient				| line pBegin pEnd|	pBegin := MyPoint x: 1 y: 5.	pEnd := MyPoint x: 3 y: 17.		line := MyLine begin: pBegin end: pEnd.		self assert: line gradient equals: 6. ! !Object subclass: #MyPoint	instanceVariableNames: 'x y'	classVariableNames: ''	package: 'TP1-Exo1'!!MyPoint methodsFor: 'printing' stamp: 'JeanPaulDuboux 10/5/2022 11:17'!printOn: aStream	aStream		nextPut: $(;		nextPutAll: x asString;		nextPut: $,;		nextPutAll: y asString;		nextPut: $).! !!MyPoint methodsFor: 'as yet unclassified' stamp: 'JeanPaulDuboux 10/5/2022 09:36'!y	^y! !!MyPoint methodsFor: 'as yet unclassified' stamp: 'JeanPaulDuboux 10/5/2022 09:36'!x	^x! !!MyPoint methodsFor: 'initialization' stamp: 'JeanPaulDuboux 10/5/2022 11:32'!initialize		super initialize.	x:= 0.	y:= 0.! !!MyPoint methodsFor: 'accessing' stamp: 'JeanPaulDuboux 10/5/2022 09:37'!x: aFloat y: anotherFloat	x := aFloat.	y := anotherFloat.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyPoint class	instanceVariableNames: ''!!MyPoint class methodsFor: 'instance creation' stamp: 'JeanPaulDuboux 10/5/2022 09:38'!x: aFloat y: anotherFloat		|point|	point := MyPoint new.		point x: aFloat y: anotherFloat. 	^point! !TestCase subclass: #MyPointTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Exo1'!!MyPointTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/6/2022 19:41'!testCreateMyPoint				| point point2 |	point := MyPoint new.	point2 := MyPoint x: 3 y: 7.		self assert: point x equals: 0.	self assert: point y equals: 0.		self assert: point2 x equals: 3.	self assert: point2 y equals: 7.		! !!MyPointTest methodsFor: 'tests' stamp: 'JeanPaulDuboux 10/5/2022 11:34'!testPrintOn		|point|	point := MyPoint new.		self assert: point asString equals: '(0,0)'.! !